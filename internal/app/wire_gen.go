// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"vera-identity-service/internal/auth"
	"vera-identity-service/internal/config"
	"vera-identity-service/internal/db"
	"vera-identity-service/internal/logger"
	"vera-identity-service/internal/middleware"
	"vera-identity-service/internal/router"
	"vera-identity-service/internal/tool"
	"vera-identity-service/internal/user"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	zapLogger, err := logger.NewLogger()
	if err != nil {
		return nil, err
	}
	configConfig := config.NewConfig(zapLogger)
	httpMiddleware := middleware.NewHTTPMiddleware(zapLogger)
	corsMiddleware := middleware.NewCORSMiddleware(configConfig)
	authMiddleware := middleware.NewAuthMiddleware(configConfig)
	handler := tool.NewHandler()
	gormDB, err := db.NewDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	repository := user.NewRepository(gormDB)
	service := user.NewService(repository)
	authService := auth.NewService(configConfig, service)
	authHandler := auth.NewHandler(configConfig, authService, service)
	userHandler := user.NewHandler(service)
	engine := router.NewRouter(httpMiddleware, corsMiddleware, authMiddleware, handler, authHandler, userHandler)
	app := NewApp(configConfig, engine, gormDB, zapLogger, authService)
	return app, nil
}
